spring:
  shardingsphere:
    datasource:
    #所有数据源名字
      names: ds-orders-0,ds-orders-1
      #订单orders数据源配置 0
      ds-orders-0:
        type: com.alibaba.druid.pool.DruidDataSource #使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/orders_0?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 111111
      #订单orders数据源配置 1
      ds-orders-1:
        type: com.alibaba.druid.pool.DruidDataSource #使用 Hikari 数据库连接池
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/orders_1?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 111111
    #分片规则
    sharding:
      tables:
        #orders 表配置
        orders:
          #真实的数据节点 # 映射到 ds-orders-0 和 ds-orders-1 数据源的 orders 表们
          actualDataNodes: ds-orders-0.orders_$->{[0,2,4,6]},ds-orders-1.orders_$->{[1,3,5,7]}
          key-generator: # 主键生成策略
            column: id
            type: SNOWFLAKE #雪花算法
          database-strategy: #数据库分片策略
            inline:
              algorithm-expression: ds-orders-$->{user_id % 2}
              sharding-column: user_id
          table-strategy: #表分片策略
            inline:
              algorithm-expression: orders_$->{user_id % 8}
              sharding-column: user_id
        order_config: #order_config 表
          actualDataNodes: ds-orders-0.order_config # 仅映射到 ds-orders-0 数据源的 order_config 表
    # 拓展属性配置
    props:
      sql:
        show: true #打印sql


#mybatis 配置内容
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.cc.shardingjdbc.datafragmentation.entity
  configuration:
    map-underscore-to-camel-case: true
